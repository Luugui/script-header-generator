#!/usr/bin/env python
# -*- coding: utf-8 -*-
# filename          : h_gen.py
# description  : Generates a header like this one
# author            : dad2jrn
# email             :
# date              : 20170422
# version           : 0.12
# usage             : python h_gen.py
# notes             : This header was generated by this script
# license           : MIT
# py version        : 2.7.13
#==============================================================================

# Import the modules needed to run this script.
from os.path import exists
from time import strftime
import os
import sys
import re

# Gets current version of Python running this script
version = sys.version
for i in version:
    v = re.search(r'(\d+\.\d+\.\d+)', version)
    # global py_ver
    py_ver = v.group(1)

# Menu to choose header type
def main():
    """main menu
    """
    os.system("clear")
    global my_header
    menu = {}
    menu['1'] = "Python Header"
    menu['2'] = "Bash Header"
    menu['3'] = "ZSH Header"
    menu['4'] = "Exit"
    while True:
        options=menu.keys()
        options.sort()
        for j in options:
            print j, menu[j]
        selection=raw_input('Please Select Header Type: ')
        if selection == '1':
            my_header = "python"
            gen_title()
        elif selection == '2':
            my_header = "bash"
            gen_title()
        elif selection == '3':
            my_header = "zsh"
            gen_title()
        elif selection == '4':
            sys.exit('Exiting')
        else:
            print "Unknown Option Selected!"

def gen_title():
    """Generates the  title
    """
    global title
    os.system("clear")
    # Get the title of the script which is used to generate the filename
    title = raw_input("Enter a  title for your script: ")
    # Add .py to the end of the filename.
    if my_header == "python":
        title = title + ".py"
    else:
    # Add .sh to the end of the filename
        title = title + ".sh"
    # Convert all letters to lower case.
    title = title.lower()
    # Remove spaces from the title.
    title = title.replace(' ', '_')
    # Check to see if the filename exists to not overwrite it.
    if exists(title):
        print "\nA script with this  name already exists."
        exit(1)
    user_input()

def user_input():
    """Get basic user info for header
    """
    global descrpt
    global name
    global email
    global ver
    global div
    # Get some input from the user
    descrpt = raw_input("Enter a description of your script: ")
    name = raw_input("Enter your name: ")
    email = raw_input("Enter your email: ")
    ver = raw_input("Enter the version number (ex. 0.0.1): ")
    div = "======================================="
    gen_header()

def gen_header():
    """Generates the header
    """
    # Create a file that can be written to.
    filename = open( title, 'w')

    # Set the date automatically.
    date = strftime("%Y%m%d")

    # Write the data to the file.
    if my_header == "python":
        filename.write('#!/usr/bin/env python')
        filename.write('\n# -*- coding: utf-8 -*-')
    elif my_header == "bash":
        filename.write('#!/usr/bin/env bash')
    else:
        filename.write('#!/usr/bin/env zsh')

    # Continue with the rest of the header
    filename.write('\n# filename            : ' + title)
    filename.write('\n# description    : ' + descrpt)
    filename.write('\n# author              : ' + name)
    filename.write('\n# email               : ' + email)
    filename.write('\n# date                : ' + date)
    filename.write('\n# version             : ' + ver)
    if my_header == 'python':
        filename.write('\n# usage               : ' + 'python ' + title)
    else:
        filename.write('\n# usage               : ' + './' + title)
    filename.write('\n# notes               : ')
    filename.write('\n# python_version      : ' + py_ver)
    filename.write('\n#' + div * 2 + '\n')
    filename.write('\n')
    filename.write('\n')

    # Close the file after writing to it.
    filename.close()

    # Clear the screen. This line of code will not work on Windows.
    os.system("clear")
    select_editor()

def select_editor():
    """Selects the editor
    """
    # select the editor to to allow user to copy header or start writing their code
    menu = {}
    menu['1'] = "VIM"
    menu['2'] = "Nano"
    menu['3'] = "eMacs"
    menu['4'] = "Atom"
    menu['5'] = "Exit"
    while True:
        options = menu.keys()
        options.sort()
        for i in options:
            print i, menu[i]
        selection = raw_input("Please choose your editor:")
        if selection == '1':
            os.system("vim +12 " + title)
            exit()
        elif selection == '2':
            os.system("nano +12 " + title)
            exit()
        elif selection == '3':
            os.system("emacs +12 " + title)
            exit()
        elif selection == '4':
            os.system("atom +12 " + title)
            exit()
        elif selection == '5':
            sys.exit("Exiting")
        else:
            print "Invalid Option Selected!"

main()